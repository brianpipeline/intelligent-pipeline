substitutions:
  # Repository Specific configuration. DevOps can change these as needed
  _APP_NAME: {{ appName }}
  _APP_VERSION: {{ appVersion }}
  _ORIGINAL_APP_VERSION: {{ originalAppVersion }}
  _REPO_NAME: $(body.message.data.repositoryName)
  _REPO_TO_CLONE: $(body.message.data.cloneUrl)
  _SERVICE_NAME: {{ serviceName }}
  _REPOSITORY: {{ serviceName }}
  _SERVICE_ACCOUNT: cloud-run@cloud-build-pipeline-396819.iam.gserviceaccount.com
  _SHORT_BUILD_ID: ${BUILD_ID:0:8}


options:
  substitution_option: ALLOW_LOOSE
  logging: CLOUD_LOGGING_ONLY

steps:
  - name: 'gcr.io/cloud-builders/git'
    id: 'Clone intelligent pipeline'
    entrypoint: 'bash'
    args: [
      '-c',
      'git clone https://github.com/brianpipeline/intelligent-pipeline'
    ]

  - name: 'gcr.io/cloud-builders/git'
    id: 'Clone repo'
    entrypoint: 'bash'
    args: [
      '-c',
      'git clone $_REPO_TO_CLONE'
    ]

  # Build the container image
  - name: '{{buildImage}}'
    id: 'build project'
    entrypoint: 'bash'
    args: [
      "-c",
      "cd $_REPO_NAME && {{ buildArgs }}"
    ]
  {{#ifIsMainOrRelease branchName}}
  - name: 'gcr.io/cloud-builders/gcloud'
    id: 'Create artifact registry repository'
    entrypoint: 'bash'
    args:
      - '-eEuo'
      - 'pipefail'
      - '-c'
      - |-
        if `gcloud artifacts repositories list | grep -q "$_REPOSITORY"`;
        then
          echo "Repository already exists."
        else
          gcloud artifacts repositories create $_REPOSITORY --repository-format=docker --location=us-central1
        fi
  
  - name: 'node:16'
    id: 'run generateDockerfile'
    entrypoint: 'bash'
    args: [
      '-c',
      'cd intelligent-pipeline/dockerfile_generator 
      && npm install 
      && node generateDockerFile.js ${_APP_NAME} ${_ORIGINAL_APP_VERSION} /workspace/intelligent-pipeline/dockerfile_generator/dockerfiletemplate'
    ]

  # Push the container image to Container Registry
  - name: 'gcr.io/cloud-builders/docker'
    id: 'Build docker image'
    entrypoint: 'bash'
    args:
      [
        '-c',
        'docker build -f /workspace/intelligent-pipeline/dockerfile_generator/Dockerfile
        -t us-central1-docker.pkg.dev/${PROJECT_ID}/${_REPOSITORY}/${_APP_NAME}:${_APP_VERSION}
        .'
      ]

  # Push the container image to Container Registry
  - name: 'gcr.io/cloud-builders/docker'
    id: 'Push docker image'
    args:
      [
        'push',
        'us-central1-docker.pkg.dev/${PROJECT_ID}/${_REPOSITORY}/${_APP_NAME}:${_APP_VERSION}'
      ]


  {{#each envs}}

  - name: 'gcr.io/cloud-builders/gcloud'
    id: 'Deploy to cloud run for {{this}}.'
    entrypoint: 'bash'
    args:
      - '-eEuo'
      - 'pipefail'
      - '-c'
      - |-
        if [[ -z "$(gcloud run services describe $_SERVICE_NAME-{{this}} --region=us-central1 2>&1 >/dev/null)" ]]; 
        then
        	echo "Not the first time deploying this app."

          gcloud run deploy $_SERVICE_NAME-{{this}}
          --service-account=$_SERVICE_ACCOUNT
          --image=us-central1-docker.pkg.dev/$PROJECT_ID/$_REPOSITORY/$_APP_NAME:$_APP_VERSION
          --ingress=all
          --allow-unauthenticated
          --min-instances=1
          --max-instances=1
          --project=$PROJECT_ID
          --region=us-central1
          --no-traffic
          --revision-suffix=$_SHORT_BUILD_ID
          --tag=green-$_SHORT_BUILD_ID
          --port=8080
        else
          echo "First time deploying this app."

          gcloud run deploy $_SERVICE_NAME-{{this}}
          --service-account=$_SERVICE_ACCOUNT
          --image=us-central1-docker.pkg.dev/$PROJECT_ID/$_REPOSITORY/$_APP_NAME:$_APP_VERSION
          --ingress=all
          --allow-unauthenticated
          --min-instances=1
          --max-instances=1
          --project=$PROJECT_ID
          --region=us-central1
          --revision-suffix=$_SHORT_BUILD_ID
          --tag=green-$_SHORT_BUILD_ID
          --port=8080
        fi

  # The only way to do a finally block is to listen to see if the build fails, then clear green tags after that associated with
  # this build. I don't really want to get that working right now, but ideally that's how we'd do it.
  - name: 'gcr.io/cloud-builders/gcloud'
    id: 'Update traffic on green build for {{this}}'
    entrypoint: 'bash'
    args:
      [
        '-c',
        'gcloud run services update-traffic $_SERVICE_NAME-{{this}}
        --project=$PROJECT_ID
        --region=us-central1
        --to-tags green-$_SHORT_BUILD_ID=100'
      ]
  
  - name: 'gcr.io/cloud-builders/gcloud'
    id: 'Clear tags for {{this}}'
    entrypoint: 'bash'
    args:
      [
        '-c',
        'gcloud run services update-traffic $_SERVICE_NAME-{{this}}
        --project=$PROJECT_ID
        --region=us-central1
        --clear-tags'
      ]

  - name: 'gcr.io/cloud-builders/gcloud'
    id: 'Tag new green build on {{this}} with blue'
    entrypoint: 'bash'
    args:
      [
        '-c',
        'gcloud run services update-traffic $_SERVICE_NAME-{{this}}
        --project=$PROJECT_ID
        --region=us-central1
        --update-tags=blue=$_SERVICE_NAME-{{this}}-$_SHORT_BUILD_ID'
      ]
  
  {{/each}}
  {{/ifIsMainOrRelease}}
