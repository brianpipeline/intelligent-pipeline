substitutions:
  _ARTIFACT_TAG: {{ artifactTag }}
  _ENVS_TO_DEPLOY: {{{ envsToDeploy }}}
  _COMMIT_ID_FOR_DEPLOYMENT_TESTS: {{ commitId }} 
  _CASCADE_TO_OTHER_ENVS: {{{ cascade }}}
  _SKIP_DEPLOYMENT_TESTS: {{{ skipDeploymentTests }}}
  _SERVICE_ACCOUNT: cloud-run@cloud-build-pipeline-396819.iam.gserviceaccount.com
  _SHORT_BUILD_ID: ${BUILD_ID:0:8}

options:
  substitution_option: ALLOW_LOOSE
  logging: CLOUD_LOGGING_ONLY

steps:
  - name: 'gcr.io/cloud-builders/git'
    id: 'Clone intelligent pipeline'
    entrypoint: 'bash'
    args: [
      '-c',
      'git clone https://github.com/brianpipeline/intelligent-pipeline'
    ]

  - name: 'gcr.io/cloud-builders/git'
    id: 'Clone repo'
    entrypoint: 'bash'
    args: [
      '-c',
      'git clone {{ cloneUrl }}'
    ]

  - name: 'gcr.io/cloud-builders/git'
    id: 'Checkout stuff'
    entrypoint: 'bash'
    args: 
      - '-eEuo'
      - 'pipefail'
      - '-c'
      - |-
        if [ "$_COMMIT_ID" == "" ]
        then
          cd {{ repoName }} && git checkout $_BRANCH_NAME
        else
          cd {{ repoName }} && git checkout $_COMMIT_ID
        fi

  - name: 'gcr.io/cloud-builders/gcloud'
    id: 'Deploy to cloud run for {{{env}}}.'
    entrypoint: 'bash'
    args:
      - '-eEuo'
      - 'pipefail'
      - '-c'
      - |-
        if [[ -z "$(gcloud run services describe {{ serviceName }}-{{{env}}} --region=us-central1 2>&1 >/dev/null)" ]]; 
        then
        	echo "Not the first time deploying this app"

          gcloud run deploy {{ serviceName }}-{{{env}}} \
          --service-account=$_SERVICE_ACCOUNT \
          --image=us-central1-docker.pkg.dev/${PROJECT_ID}/{{ serviceName }}/{{ appName }}:$_ARTIFACT_TAG \
          --ingress=all \
          --allow-unauthenticated \
          --min-instances=1 \
          --max-instances=1 \
          --project=$PROJECT_ID \
          --region=us-central1 \
          --no-traffic \
          --revision-suffix=$_SHORT_BUILD_ID \
          --tag=green-$_SHORT_BUILD_ID \
          --port=8080
        else
          echo "First time deploying this app, or skipping deployment tests."
          gcloud run deploy {{ serviceName }}-{{{env}}} \
          --service-account=$_SERVICE_ACCOUNT \
          --image=us-central1-docker.pkg.dev/${PROJECT_ID}/{{ serviceName }}/{{ appName }}:$_ARTIFACT_TAG \
          --ingress=all \
          --allow-unauthenticated \
          --min-instances=1 \
          --max-instances=1 \
          --project=$PROJECT_ID \
          --region=us-central1 \
          --revision-suffix=$_SHORT_BUILD_ID \
          --tag=green-$_SHORT_BUILD_ID \
          --port=8080
        fi

  - name: 'gcr.io/cloud-builders/gcloud'
    id: 'Update traffic on green build for {{{env}}}'
    entrypoint: 'bash'
    args:
      - '-eEuo'
      - 'pipefail'
      - '-c'
      - |-
        gcloud run services update-traffic {{serviceName}}-{{{env}}} \
        --project=$PROJECT_ID \
        --region=us-central1 \
        --to-tags green-$_SHORT_BUILD_ID=100

  
  # The only way to do a finally block is to listen to see if the build fails, then clear green tags after that associated with
  # this build. I don't really want to get that working right now, but ideally that's how we'd do it.
  - name: 'gcr.io/cloud-builders/gcloud'
    id: 'Clear tags for {{{env}}}'
    entrypoint: 'bash'
    args:
      - '-eEuo'
      - 'pipefail'
      - '-c'
      - |-
        gcloud run services update-traffic {{serviceName}}-{{{env}}} \
          --project=$PROJECT_ID \
          --region=us-central1 \
          --clear-tags

  - name: 'gcr.io/cloud-builders/gcloud'
    id: 'Tag new green build on {{{env}}} with blue'
    entrypoint: 'bash'
    args:
      [
        '-c',
        'gcloud run services update-traffic {{serviceName}}-{{{env}}}
        --project=$PROJECT_ID
        --region=us-central1
        --update-tags=blue={{serviceName}}-{{{env}}}-$_SHORT_BUILD_ID'
      ]

  - name: 'node:16'
    id: 'Generate deploy-to-env pipeline'
    entrypoint: 'bash'
    args:
      - '-eEuo'
      - 'pipefail'
      - '-c'
      - |-
        cd flabs && ls
        if [[ "$_BRANCH_NAME" == *"release"* ]]
        then
          cd /workspace/intelligent-pipeline/cloudbuild_generator && \
          npm install && \
          node generateDeployToEnv.js \
          /workspace/{{ repoName }}/brianpipeline.yaml \
          templates/cloudbuild-deploy-template.yaml \
          {{ repoName }} \
          {{ cloneUrl }} \
          $_COMMIT_ID \
          $(echo {{ originalAppVersion }} | sed 's/-SNAPSHOT//') \
          "$_ENVS_TO_DEPLOY" \
          true \
          false \
          /workspace/{{ repoName }}/settings.gradle
        else
          cd /workspace/intelligent-pipeline/cloudbuild_generator && \
          npm install && \
          node generateDeployToEnv.js \
          /workspace/{{ repoName }}/brianpipeline.yaml \
          templates/cloudbuild-deploy-template.yaml \
          {{ repoName }} \
          {{ cloneUrl }} \
          $_COMMIT_ID \
          {{ originalAppVersion }}-$_SHORT_BUILD_ID \
          "$_ENVS_TO_DEPLOY" \
          true \
          false \
          /workspace/{{ repoName }}/settings.gradle
        fi

  - name: 'gcr.io/cloud-builders/gcloud'
    id: 'Create new pubsub topic.'
    entrypoint: 'bash'
    args:
      - '-eEuo'
      - 'pipefail'
      - '-c'
      - |-
        if [ -z "$_ENVS_TO_DEPLOY" ] || [ $_ENVS_TO_DEPLOY == "" ]
        then
          echo "Do nothing, deploy array is empty"
        else
          env=$(echo $_ENVS_TO_DEPLOY | awk -F' ' '{print $1}' | sed 's/"//g')

          echo $env
          if [ -n "$env" ]
          then
            if [[ -z "$(gcloud pubsub topics describe {{ repoName }}-deploy-to-$env 2>&1 >/dev/null)" ]]; 
            then
              echo "Pubsub topic already exists"
            else
              gcloud pubsub topics create {{ repoName }}-deploy-to-$env
            fi
          else
            echo "On a feature branch, so we're not cascading."
          fi
        fi

  - name: 'gcr.io/cloud-builders/gcloud'
    id: 'Create deploy-to-env pipeline.'
    entrypoint: 'bash'
    args:
      - '-eEuo'
      - 'pipefail'
      - '-c'
      - |-
        if [ -z "$_ENVS_TO_DEPLOY" ] || [ $_ENVS_TO_DEPLOY == "" ]
        then
          echo "Do nothing, deploy array is empty"
        else
          env=$(echo $_ENVS_TO_DEPLOY | awk -F' ' '{print $1}' | sed 's/"//g')
          if [[ "$_BRANCH_NAME" == *"release"* ]]
          then
            artifactTag=$(echo {{ originalAppVersion }} | sed 's/-SNAPSHOT//')
          elif [[ "$_BRANCH_NAME" == "main" ]]
          then
            artifactTag={{ originalAppVersion }}-$_SHORT_BUILD_ID
          else
            env=""
          fi
          
          echo $env
          if [ -n "$env" ]
          then
            remainingEnvsToDeploy=$(echo $_ENVS_TO_DEPLOY | sed -e "s/\"$env\" //g")

            if [[ -z "$(gcloud builds triggers describe {{ repoName }}-deploy-to-$env 2>&1 >/dev/null)" ]]; 
            then
              gcloud builds triggers delete {{ repoName }}-deploy-to-$env
              gcloud builds triggers create pubsub \
              --name={{ repoName }}-deploy-to-$env \
              --topic=projects/cloud-build-pipeline-396819/topics/{{ repoName }}-deploy-to-$env \
              --inline-config=/workspace/intelligent-pipeline/cloudbuild_generator/cloudbuild-deploy.yaml \
              --substitutions=_COMMIT_ID_FOR_DEPLOYMENT_TESTS=$_COMMIT_ID,_CASCADE_TO_OTHER_ENVS=true,_SKIP_DEPLOYMENT_TESTS=false,_ARTIFACT_TAG=$artifactTag,_ENVS_TO_DEPLOY="'$remainingEnvsToDeploy'" \
              --region=global
            else
              gcloud builds triggers create pubsub \
              --name={{ repoName }}-deploy-to-$env \
              --topic=projects/cloud-build-pipeline-396819/topics/{{ repoName }}-deploy-to-$env \
              --inline-config=/workspace/intelligent-pipeline/cloudbuild_generator/cloudbuild-deploy.yaml \
              --substitutions=_COMMIT_ID_FOR_DEPLOYMENT_TESTS=$_COMMIT_ID,_CASCADE_TO_OTHER_ENVS=true,_SKIP_DEPLOYMENT_TESTS=false,_ARTIFACT_TAG=$artifactTag,_ENVS_TO_DEPLOY="'$remainingEnvsToDeploy'" \
              --region=global
            fi
          else
            echo "On a feature branch, so we're not cascading."
          fi
        fi

  - name: 'gcr.io/cloud-builders/gcloud'
    id: 'Publish pubsub message'
    entrypoint: 'bash'
    args:
      - '-eEuo'
      - 'pipefail'
      - '-c'
      - |-
        if [ -z "$_ENVS_TO_DEPLOY" ] || [ $_ENVS_TO_DEPLOY == "" ]
        then
          echo "Do nothing, array is empty"
        else
          env=$(echo $_ENVS_TO_DEPLOY | awk -F' ' '{print $1}' | sed 's/"//g')
          
          if [[ "$_BRANCH_NAME" == *"release"* ]] || [[ "$_BRANCH_NAME" == "main" ]]
          then
            gcloud pubsub topics publish projects/cloud-build-pipeline-396819/topics/{{ repoName }}-deploy-to-$env \
            --message='{"unused": "{{ repoName }}"}'
          else
            echo "Not cascading - this is a feature branch."
          fi
        fi