substitutions:
  _COMMIT_ID: {{ commitId }}
  _BRANCH_NAME: {{ branchName }}
  _SHORT_BUILD_ID: ${BUILD_ID:0:8}

options:
  substitution_option: ALLOW_LOOSE
  logging: CLOUD_LOGGING_ONLY

steps:
  - name: 'gcr.io/cloud-builders/git'
    id: 'Clone intelligent pipeline'
    entrypoint: 'bash'
    args: [
      '-c',
      'git clone https://github.com/brianpipeline/intelligent-pipeline'
    ]

  - name: 'gcr.io/cloud-builders/git'
    id: 'Clone repo'
    entrypoint: 'bash'
    args: [
      '-c',
      'git clone {{ cloneUrl }}'
    ]

  - name: 'gcr.io/cloud-builders/git'
    id: 'Checkout stuff'
    entrypoint: 'bash'
    args: 
      - '-eEuo'
      - 'pipefail'
      - '-c'
      - |-
        if [ "$_COMMIT_ID" == "" ]
        then
          cd {{ repoName }} && git checkout $_BRANCH_NAME
        else
          cd {{ repoName }} && git checkout $_COMMIT_ID
        fi
    
  - name: '{{buildImage}}'
    id: 'build project'
    entrypoint: 'bash'
    args: [
      "-c",
      "cd {{ repoName }} && {{{ buildArgs }}}"
    ]

  - name: 'gcr.io/cloud-builders/gcloud'
    id: 'Create artifact registry repository'
    entrypoint: 'bash'
    args:
      - '-eEuo'
      - 'pipefail'
      - '-c'
      - |-
        if `gcloud artifacts repositories list | grep -q "{{ serviceName }}"`;
        then
          echo "Repository already exists."
        else
          gcloud artifacts repositories create {{ serviceName }} --repository-format=docker --location=us-central1
        fi

  - name: 'node:16'
    id: 'run generateDockerfile'
    entrypoint: 'bash'
    args: [
      '-c',
      'cd intelligent-pipeline/dockerfile_generator 
      && npm install 
      && node generateDockerFile.js {{ appName }} {{ originalAppVersion }} /workspace/intelligent-pipeline/dockerfile_generator/dockerfiletemplate'
    ]

  - name: 'gcr.io/cloud-builders/docker'
    id: 'Build docker image'
    entrypoint: 'bash'
    args:
      - '-eEuo'
      - 'pipefail'
      - '-c'
      - |-
        if [[ "$_BRANCH_NAME" == *"release"* ]]
        then
          docker build -f /workspace/intelligent-pipeline/dockerfile_generator/Dockerfile \
          -t us-central1-docker.pkg.dev/${PROJECT_ID}/{{ serviceName }}/{{ appName }}:$(echo {{ originalAppVersion }} | sed 's/-SNAPSHOT//') \
          .
        else
          docker build -f /workspace/intelligent-pipeline/dockerfile_generator/Dockerfile \
          -t us-central1-docker.pkg.dev/${PROJECT_ID}/{{ serviceName }}/{{ appName }}:{{ originalAppVersion }}-$_SHORT_BUILD_ID \
          .
        fi

  # Push the container image to Container Registry
  - name: 'gcr.io/cloud-builders/docker'
    id: 'Push docker image'
    entrypoint: 'bash'
    args:
      - '-eEuo'
      - 'pipefail'
      - '-c'
      - |-
        if [[ "$_BRANCH_NAME" == *"release"* ]]
        then
          docker push us-central1-docker.pkg.dev/${PROJECT_ID}/{{ serviceName }}/{{ appName }}:$(echo {{ originalAppVersion }} | sed 's/-SNAPSHOT//')
        else
          docker push us-central1-docker.pkg.dev/${PROJECT_ID}/{{ serviceName }}/{{ appName }}:{{ originalAppVersion }}-$_SHORT_BUILD_ID
        fi

  - name: 'node:16'
    id: 'Generate deploy-to-env pipeline'
    entrypoint: 'bash'
    args:
      - '-eEuo'
      - 'pipefail'
      - '-c'
      - |-
        if [[ "$_BRANCH_NAME" == *"release"* ]]
        then
          cd /workspace/intelligent-pipeline/cloudbuild_generator \
          && npm install \
          && node generateDeployToEnv.js \
          /workspace/{{ repoName }}/brianpipeline.yaml \
          templates/cloudbuild-deploy-template.yaml \
          {{ repoName }} \
          {{ cloneUrl }} \
          $_COMMIT_ID \
          $(echo {{ originalAppVersion }} | sed 's/-SNAPSHOT//') \
          $(grep 'envsToDeployToOnRelease:' /workspace/{{ repoName }}/brianpipeline.yaml | sed 's/envsToDeployToOnRelease: //'') \
          true \
          false \
          /workspace/{{ repoName }}/settings.gradle
          && cp cloudbuild-deploy.yaml /workspace
        else
          cd /workspace/intelligent-pipeline/cloudbuild_generator \
          && npm install \
          && node generateDeployToEnv.js \
          /workspace/{{ repoName }}/brianpipeline.yaml \
          templates/cloudbuild-deploy-template.yaml \
          {{ repoName }} \
          {{ cloneUrl }} \
          $_COMMIT_ID \
          {{ originalAppVersion }}-$_SHORT_BUILD_ID \
          $(grep 'envsToDeployToOnMain:' /workspace/{{ repoName }}/brianpipeline.yaml | sed 's/envsToDeployToOnMain: //'') \
          true \
          false \
          /workspace/{{ repoName }}/settings.gradle
          && cp cloudbuild-deploy.yaml /workspace
        fi

        ls
        cd /workspace/intelligent-pipeline/cloudbuild_generator && ls
        cd /workspace && ls

  - name: 'gcr.io/cloud-builders/gcloud'
    id: 'Create new pubsub topic.'
    entrypoint: 'bash'
    args:
      - '-eEuo'
      - 'pipefail'
      - '-c'
      - |-
        if [[ "$_BRANCH_NAME" == *"release"* ]]
        then
          result=$(grep 'envsToDeployToOnRelease:' /workspace/{{ repoName }}/brianpipeline.yaml | sed -n 's/.*\["\([^"]*\)".*/\1/p')
        elif [[ "$_BRANCH_NAME" == "main" ]]
        then
          result=$(grep 'envsToDeployToOnMain:' /workspace/{{ repoName }}/brianpipeline.yaml | sed -n 's/.*\["\([^"]*\)".*/\1/p')
        else
          result=""
        fi
        
        echo $result
        if [ -n "$result" ]
        then
          if [[ -z "$(gcloud pubsub topics describe {{ repoName }}-deploy-to-$result 2>&1 >/dev/null)" ]]; 
          then
            echo "Pubsub topic already exists"
          else
            gcloud pubsub topics create {{ repoName }}-deploy-to-$result
          fi
        else
          echo "On a feature branch, so we're not cascading."
        fi

  - name: 'gcr.io/cloud-builders/gcloud'
    id: 'REMOVE.'
    entrypoint: 'bash'
    args:
      - '-eEuo'
      - 'pipefail'
      - '-c'
      - |-
        cd /workspace/intelligent-pipeline/cloudbuild_generator && ls
        cd /workspace && ls

  - name: 'gcr.io/cloud-builders/gcloud'
    id: 'Create deploy-to-env pipeline.'
    entrypoint: 'bash'
    args:
      - '-eEuo'
      - 'pipefail'
      - '-c'
      - |-
        if [[ "$_BRANCH_NAME" == *"release"* ]]
        then
          env=$(grep 'envsToDeployToOnRelease:' /workspace/{{ repoName }}/brianpipeline.yaml | sed -n 's/.*\["\([^"]*\)".*/\1/p')
          artifactTag=$(echo {{ originalAppVersion }} | sed 's/-SNAPSHOT//')
        elif [[ "$_BRANCH_NAME" == "main" ]]
        then
          env=$(grep 'envsToDeployToOnMain:' /workspace/{{ repoName }}/brianpipeline.yaml | sed -n 's/.*\["\([^"]*\)".*/\1/p')
          artifactTag={{ originalAppVersion }}-$_SHORT_BUILD_ID
        else
          env=""
        fi
        
        echo $env
        if [ -n "$env" ]
        then
          if [[ -z "$(gcloud builds triggers describe {{ repoName }}-deploy-to-$env 2>&1 >/dev/null)" ]]; 
          then
            gcloud builds triggers delete {{ repoName }}-deploy-to-$env
            gcloud builds triggers create pubsub \
            --name={{ repoName }}-deploy-to-$env \
            --topic=projects/cloud-build-pipeline-396819/topics/{{ repoName }}-deploy-to-$env \
            --inline-config=/workspace/intelligent-pipeline/cloudbuild_generator/cloudbuild-deploy.yaml \
            --substitutions=_COMMIT_ID_FOR_DEPLOYMENT_TESTS=$_COMMIT_ID,_CASCADE_TO_OTHER_ENVS=true,_SKIP_DEPLOYMENT_TESTS=false,_ARTIFACT_TAG=$artifactTag \
            --region=global
          else
            gcloud builds triggers create pubsub \
            --name={{ repoName }}-deploy-to-$env \
            --topic=projects/cloud-build-pipeline-396819/topics/{{ repoName }}-deploy-to-$env \
            --inline-config=/workspace/intelligent-pipeline/cloudbuild_generator/cloudbuild-deploy.yaml \
            --substitutions=_COMMIT_ID_FOR_DEPLOYMENT_TESTS=$_COMMIT_ID,_CASCADE_TO_OTHER_ENVS=true,_SKIP_DEPLOYMENT_TESTS=false,_ARTIFACT_TAG=$artifactTag \
            --region=global
          fi
        else
          echo "On a feature branch, so we're not cascading."
        fi

  - name: 'gcr.io/cloud-builders/gcloud'
    id: 'Publish pubsub message'
    entrypoint: 'bash'
    args:
      - '-eEuo'
      - 'pipefail'
      - '-c'
      - |-
        if [[ "$_BRANCH_NAME" == *"release"* ]]
        then
          env=$(grep 'envsToDeployToOnRelease:' /workspace/{{ repoName }}/brianpipeline.yaml | sed -n 's/.*\["\([^"]*\)".*/\1/p')
          artifactTag=$(echo {{ originalAppVersion }} | sed 's/-SNAPSHOT//')
        elif [[ "$_BRANCH_NAME" == "main" ]]
        then
          env=$(grep 'envsToDeployToOnMain:' /workspace/{{ repoName }}/brianpipeline.yaml | sed -n 's/.*\["\([^"]*\)".*/\1/p')
          artifactTag={{ originalAppVersion }}-$_SHORT_BUILD_ID
        else
          env=""
        fi
        
        if [[ "$_BRANCH_NAME" == *"release"* ]] || [[ "$_BRANCH_NAME" == "main" ]]
        then
          gcloud pubsub topics publish projects/cloud-build-pipeline-396819/topics/{{ repoName }}-deploy-to-$env \
          --message='{"unused": "{{ repoName }}"}'
        else
          echo "Not cascading - this is a feature branch."
        fi