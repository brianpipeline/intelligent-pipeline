substitutions:
  _COMMIT_ID: {{ commitId }}
  _BRANCH_NAME: {{ branchName }}
  _SHORT_BUILD_ID: ${BUILD_ID:0:8}

options:
  substitution_option: ALLOW_LOOSE
  logging: CLOUD_LOGGING_ONLY

steps:
  - name: 'gcr.io/cloud-builders/git'
    id: 'Clone intelligent pipeline'
    entrypoint: 'bash'
    args: [
      '-c',
      'git clone https://github.com/brianpipeline/intelligent-pipeline'
    ]

  - name: 'gcr.io/cloud-builders/git'
    id: 'Clone repo'
    entrypoint: 'bash'
    args: [
      '-c',
      'git clone {{ cloneUrl }}'
    ]

  - name: 'gcr.io/cloud-builders/git'
    id: 'Checkout stuff'
    entrypoint: 'bash'
    args: 
      - '-eEuo'
      - 'pipefail'
      - '-c'
      - |-
        if [ "$_COMMIT_ID" == "" ]
        then
          cd {{ repoName }} && git checkout $_BRANCH_NAME
        else
          cd {{ repoName }} && git checkout $_COMMIT_ID
        fi
    
  - name: '{{buildImage}}'
    id: 'build project'
    entrypoint: 'bash'
    args: [
      "-c",
      "cd {{ repoName }} && {{ buildArgs }}"
    ]

  - name: 'gcr.io/cloud-builders/gcloud'
    id: 'Create artifact registry repository'
    entrypoint: 'bash'
    args:
      - '-eEuo'
      - 'pipefail'
      - '-c'
      - |-
        if `gcloud artifacts repositories list | grep -q "{{ serviceName }}"`;
        then
          echo "Repository already exists."
        else
          gcloud artifacts repositories create {{ serviceName }} --repository-format=docker --location=us-central1
        fi

  - name: 'node:16'
    id: 'run generateDockerfile'
    entrypoint: 'bash'
    args: [
      '-c',
      'cd intelligent-pipeline/dockerfile_generator 
      && npm install 
      && node generateDockerFile.js {{ appName }} {{ originalAppVersion }} /workspace/intelligent-pipeline/dockerfile_generator/dockerfiletemplate'
    ]

  - name: 'gcr.io/cloud-builders/docker'
    id: 'Build docker image'
    entrypoint: 'bash'
    args:
      - '-eEuo'
      - 'pipefail'
      - '-c'
      - |-
        if [[ "$_BRANCH_NAME" == *"release"* ]]
        then
          docker build -f /workspace/intelligent-pipeline/dockerfile_generator/Dockerfile \
          -t us-central1-docker.pkg.dev/${PROJECT_ID}/{{ serviceName }}/{{ appName }}:$(echo {{ originalAppVersion }} | sed 's/-SNAPSHOT//') \
          .
        else
          docker build -f /workspace/intelligent-pipeline/dockerfile_generator/Dockerfile \
          -t us-central1-docker.pkg.dev/${PROJECT_ID}/{{ serviceName }}/{{ appName }}:{{ originalAppVersion }}-$_SHORT_BUILD_ID \
          .
        fi

  # Push the container image to Container Registry
  - name: 'gcr.io/cloud-builders/docker'
    id: 'Push docker image'
    entrypoint: 'bash'
    args:
      - '-eEuo'
      - 'pipefail'
      - '-c'
      - |-
        if [[ "$_BRANCH_NAME" == *"release"* ]]
        then
          docker push us-central1-docker.pkg.dev/${PROJECT_ID}/{{ serviceName }}/{{ appName }}:$(echo {{ originalAppVersion }} | sed 's/-SNAPSHOT//')
        else
          docker push us-central1-docker.pkg.dev/${PROJECT_ID}/{{ serviceName }}/{{ appName }}:{{ originalAppVersion }}-$_SHORT_BUILD_ID
        fi

  - name: 'gcr.io/cloud-builders/docker'
    id: 'Get envs from brianpipeline.yaml'
    entrypoint: 'bash'
    args:
      - '-eEuo'
      - 'pipefail'
      - '-c'
      - |-
        if [[ "$_BRANCH_NAME" == *"release"* ]]
        then
          grep 'envsToDeployToOnRelease:' /workspace/{{ repoName }}/brianpipeline.yaml  | sed 's/envsToDeployToOnRelease: \[//;s/\]//'
        else
          grep 'envsToDeployToOnMain:' /workspace/{{ repoName }}/brianpipeline.yaml  | sed 's/envsToDeployToOnMain: \[//;s/\]//'
        fi